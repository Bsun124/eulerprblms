import numpy as np
import matplotlib as plt

                                                ##Solutions to Euler's Problems##

"""1 - If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000."""
total=0
for i in range(1000):
    if i%3 == 0 or i%5 == 0:
        total=total+i
print(total)

"""2. Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."""
total = 0 #Adding
firstvalue = 1
secondvalue = 1
sum = 0

while sum <= 4000000:
    if sum % 2 == 0:
        total += sum
    firstvalue = secondvalue
    secondvalue = sum
    sum = firstvalue + secondvalue

print(total)

"""3. The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?"""
largenumber = 600851475143
iteration = 2
while iteration**2 < largenumber:
    while largenumber % iteration == 0:
        largenumber = largenumber / iteration
    iteration = iteration + 1

print(largenumber)

"""4. A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers."""
#sequencename[::-1] to reverse a sequence
def reverse(string):
    return string[::-1]

def palindrome(string):
    string=str(string)
    list=[]
    for character in string:
        list.append(character)
    if len(string)%2==0 and len(string) != 0:
        indexposition=int(len(string)/2)
        if list[:indexposition]==reverse(list[indexposition:]):
            return True
    elif len(string)%2!=0 or len(string) == 0:
        return False
#Works as a palindrome boolean

#Have to make a reverse and palindrome function boolean first
firstlist=[]
secondlist=[]
products=[]
palindromes=[]
first=999
second=999
largest=first*second

while first!=100:
    firstlist.append(first)
    first-=1
while second!=100:
    secondlist.append(second)
    second-=1

for i in firstlist:
    for j in secondlist:
        result=i*j
        products.append(result)
for product in products:
    if palindrome(product)==True:
        palindromes.append(product)

print(max(palindromes))

"""5. 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?"""
from math import lcm

print(lcm(*range(1, 21)))
#Answer is 232792560, done with python version 3.10 on IDLE

#list=[]
#possibility_list=[]
#base=1
#numberlist=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
#for number in numberlist:
#    for iteration in range(500): 
#        list.append(iteration*number)
#for possibility in list:
#    if list.count(possibility)==20:
#        print("Found LCM of [1:21] -->", str(possibility))
#        possibility_list.append(possibility)
#print(max(possibility_list))
#Former Tried Solution, found an easier method through python manual

"""6. Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum."""
total=0
sum=0
for number in range(1, 101):
    number**=2
    total+=number
    #This is the sum of the squares of the numbers
for number2 in range(1,101):
    sum+=number2
sum**=2 #square of the sum
print(abs(total-sum))

"""7. By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?"""
countprime=0
n=2
def prime(number):
    for factors in range(2, number):
        if number%factors==0:
            return False
            break
    return True

while countprime!=10001:
    if prime(n)==True:
        countprime+=1
    n+=1
print(n)


"""The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?"""


number=['73167176531330624919225119674426574742355349194934'
'96983520312774506326239578318016984801869478851843'
'85861560789112949495459501737958331952853208805511'
'12540698747158523863050715693290963295227443043557'
'66896648950445244523161731856403098711121722383113'
'62229893423380308135336276614282806444486645238749'
'30358907296290491560440772390713810515859307960866'
'70172427121883998797908792274921901699720888093776'
'65727333001053367881220235421809751254540594752243'
'52584907711670556013604839586446706324415722155397'
'53697817977846174064955149290862569321978468622482'
'83972241375657056057490261407972968652414535100474'
'82166370484403199890008895243450658541227588666881'
'16427171479924442928230863465674813919123162824586'
'17866458359124566529476545682848912883142607690042'
'24219022671055626321111109370544217506941658960408'
'07198403850962455444362981230987879927244284909188'
'84580156166097919133875499200524063689912560717606'
'05886116467109405077541002256983155200055935729725'
'71636269561882670428252483600823257530420752963450']
#works

newlist=[]
maxlist=[]
for largenumber in number:
    for digit in largenumber:
        digit=int(digit)
        newlist.append(digit)

a=int(0)
tripletenlets=newlist[a:a+int(13)]

while a+int(13)!=int(1000):
    total=1
    for digits in newlist[a:a+int(13)]:
        total*=digits
        maxlist.append(total)
    a+=int(1)
    
print(max(maxlist))

"""
9. A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

a^2 + b^2 = c^2
For example, 32 + 42 = 9 + 16 = 25 = 5^2.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
"""
import time
start_time=time.time()

for a in range(1, 1000):
    for b in range(1, 1000):
        c=1000-a-b
        if (a**2+b**2) == c**2:
            print(a*b*c)

end_time=time.time()
print(end_time-start_time)
