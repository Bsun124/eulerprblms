import numpy

                                                ##Solutions to Euler's Problems##
                                                
"""1 - If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000."""
total=0
for i in range(1000):
    if i%3 == 0 or i%5 == 0:
        total=total+i
print(total)

"""2 - Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."""
total = 0
firstvalue = 1
secondvalue = 1
sum = 0

while sum <= 4000000:
    if sum % 2 == 0:
        total += sum
    firstvalue = secondvalue
    secondvalue = sum
    sum = firstvalue + secondvalue

print(total)

"""3 - The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?"""
largenumber = 112123123412345
iteration = 2
while iteration * iteration < largenumber:
    while largenumber % iteration == 0:
        largenumber = largenumber / iteration
    iteration = iteration + 1

print(largenumber)

"""4. A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

Find the largest palindrome made from the product of two 3-digit numbers."""
#sequencename[::-1] to reverse a sequence
def reverse(string):
    return string[::-1]

def palindrome(string):
    string=str(string)
    list=[]
    for character in string:
        list.append(character)
    if len(string)%2==0 and len(string) != 0:
        indexposition=int(len(string)/2)
        if list[:indexposition]==reverse(list[indexposition:]):
            return True
    elif len(string)%2!=0 or len(string) == 0:
        return False
#Works as a palindrome boolean

#Have to make a reverse and palindrome function boolean first
firstlist=[]
secondlist=[]
products=[]
palindromes=[]
first=999
second=999
largest=first*second

while first!=100:
    firstlist.append(first)
    first-=1
while second!=100:
    secondlist.append(second)
    second-=1

for i in firstlist:
    for j in secondlist:
        result=i*j
        products.append(result)
for product in products:
    if palindrome(product)==True:
        palindromes.append(product)

print(max(palindromes))
